*************************************************
       USR sub-routine for CROSS RALLY.

  Prints a "window" of the map using the first
  two string arrays declared by the program.
*************************************************


Before declaring any variables, the program must
reserve memory for the USR code using:

  CLEAR string_space,36729

To install the USR routine and define the window size, do a GOSUB 6000.
Change "charWidth" in line 6000 to the number of characters per line.
Change "blockHeight" to be half the number of lines in the window.

For example:   EXEC 36730,21,7

6000 Z=36730:GOSUB 6001:GOSUB 6001:GOSUB 6001:EXEC 36730,charWidth,blockHeight:RETURN
6001 READ U$:FOR Y=1 TO LEN(U$) STEP 2:POKE Z,(ASC(MID$(U$,Y))-65)*16+ASC(MID$(U$,Y+1))-65:Z=Z+1:NEXT:RETURN
6002 DATA LNOPEHNHPOLNOPEHNHPPINFOLNOLMHFKNHPNLNOPANIGAFDNNDJHMDAAACNNMKMOEAAAPPECIA
6003 DATA NGPPNHMMNOMKMGAFDKNPMKINBBNOJHOMACNDMKDHDGDIINAGHKAAMMCGOHDJOOACNGPNDKNGPO
6004 DATA KGAAAIDMPOECIAKHAADIHMECIBFKCGPAPMECIAMLBPMEOACGADEMIEEBPNECIADJDIPPECBGDJ


When calling the USR routine, pass the window's horizontal origin as the main function
argument and pass the vertical origin just outside the closing parenthesis.

For example:  Z=USR(A)Y



===============================================================================
Asm Source Code


ARYTAB      equ      $0097          ; pointer to the array table
FPA0        equ      $00CA
VIDRAM      equ      $4000
USRVEC      equ      $4216
CRSPTR      equ      $4280

INTCNV      equ      $EBC7          ; convert FPA0 to 16-bit integer
EVALINT     equ      $EF0D          ; evaluate 8-bit integer expression
COMMA8      equ      $EF47          ; parse comma and evaluate 8-bit integer

ASTRING     equ      FPA0
COUNTER     equ      FPA0+2
WINDOWX     equ      $00FD
WIDTH       equ      $00FE
HEIGHT      equ      $00FF


            org      36730

*** One-time Setup ***
            jsr      COMMA8         ; parse comma and 8-bit expression
            stab     WIDTH          ; set window width (in characters)
            jsr      COMMA8         ; parse comma and 8-bit expression
            stab     HEIGHT         ; set window height (lines / 2)
            bsr      install        ; setup the USR vector and exit

*** USR Entry ***
            jsr      INTCNV         ; integerize the argument
            decb                    ; subtract 1 from X argument..
            stab     WINDOWX        ; ..and store it
            jsr      EVALINT        ; evaluate Y argument
            ldaa     #5             ; multiply by 5 (size of array element)
            mul
            addd     ARYTAB         ; add Y element offset to first array
            addd     #7-5           ; array header size - size of array element
            std      ASTRING        ; store pointer to A$(Y-1)
            ldx      #VIDRAM        ; set cursor position to..
            stx      CRSPTR         ; ..top-left of screen
            ldab     HEIGHT         ; setup loop counter for..
            stab     COUNTER        ; ..the window height

winLoop     ldx      ASTRING        ; advance pointer to..
            ldab     #5             ; ..the next element in..
            abx                     ; ..the A$ array
            stx      ASTRING
            bsr      printLine      ; print portion of A$(n)
            ldx      ARYTAB         ; point X at A$ header
            ldd      2,x            ; get total size of A$ array
            addd     ASTRING        ; calculate pointer to B$(n)
            pshb                    ; transfer B$(n) ptr..
            psha                    ; ..through the stack..
            pulx                    ; ..into X
            bsr      printLine      ; print portion of B$(n)
            dec      COUNTER        ; decrement Y loop counter
            bne      winLoop        ; loop until done
            rts                     ; return

printLine   ldx      2,x            ; get pointer to string data
            ldab     WINDOWX        ; add X offset to..
            abx                     ; ..the pointer
            ldab     WIDTH          ; loop counter = window width
outChLoop   ldaa     ,x             ; get string char
            inx                     ; point to next char
            pshx                    ; push string pointer
            ldx      CRSPTR         ; get cursor location
            staa     ,x             ; store char there
            pulx                    ; pull string pointer
            inc      CRSPTR+1       ; increment cursor location
            decb                    ; decrement loop counter
            bne      outChLoop      ; loop until width chars printed
            ldd      CRSPTR         ; advance the cursor..
            addb     #31            ; ..location to start..
            andb     #~31           ; ..of next line
            bne      L1             ; branch if not page boundary
            inca                    ; increment cursor page
            anda     #$41           ; if beyond bottom of screen then..
L1          std      CRSPTR         ; ..move cursor back to top line
            rts                     ; return

*** Install USR Vector ***
install     pulx                    ; pull return address (USR entry)
            stx      USRVEC         ; save in USR vector
            rts                     ; exit


